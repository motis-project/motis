name: Unix Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types:
      - published

jobs:
  formatting:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install clang-format
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 11
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends clang-format-11

      - name: Format files
        run: find base libs modules test -type f -a \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 clang-format-11 -i

      - name: Check for differences
        run: |
          git status --porcelain
          git status --porcelain | xargs -I {} -0 test -z \"{}\"

  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: MacOS Release
            cxx: clang++
            cc: clang
            mode: Release
            cxxflags: -stdlib=libc++
            os: macos-latest
            elm: macos
            artifact: macos
            avx: On
          - name: GCC 10 Release
            cxx: g++-10
            cc: gcc-10
            mode: Release
            os: ubuntu-20.04
            elm: linux-64bit
            artifact: linux
            avx: On
          - name: GCC 10 Release
            cxx: g++-10
            cc: gcc-10
            mode: Release
            os: ubuntu-20.04
            elm: linux-64bit
            artifact: linux-noavx
            avx: Off
          - name: GCC 10 Debug
            cxx: g++-10
            cc: gcc-10
            mode: Debug
            os: ubuntu-20.04
            avx: On
          - name: Clang 11 Release
            cxx: clang++-11
            cc: clang-11
            mode: Release
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
            avx: On
          - name: Clang Tidy
            cxx: clang++-11
            cc: clang-11
            mode: Debug
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            lint: true
            os: ubuntu-20.04
            avx: On
          - key: Clang 11 Sanitizer
            cxx: clang++-11
            cc: clang-11
            mode: Release
            cflags: -fsanitize=address,undefined -fno-omit-frame-pointer
            cxxflags: -fsanitize=address,undefined -fno-omit-frame-pointer -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
            avx: On
    env:
      DEBIAN_FRONTEND: noninteractive
      BUILDCACHE_COMPRESS: true
      BUILDCACHE_ACCURACY: SLOPPY
      BUILDCACHE_LUA_PATH: ${{ github.workspace }}/tools
      BUILDCACHE_DIR: ${{ github.workspace }}/.buildcache
      UBSAN_OPTIONS: halt_on_error=1:abort_on_error=1
    steps:
      - uses: actions/checkout@v2

      - uses: seanmiddleditch/gha-setup-ninja@master
        if: matrix.config.os == 'macos-latest'

      # ==== INSTALL ====
      - name: Update APT
        if: matrix.config.os != 'macos-latest'
        run: sudo apt-get update

      - name: Install LLVM
        if: matrix.config.os != 'macos-latest' && matrix.config.cc == 'clang-11'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 11
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends libc++-11-dev libc++abi-11-dev clang-tidy-11

      - name: Install Valgrind
        if: matrix.config.mode == 'Debug' && matrix.config.cc == 'gcc-10'
        run: sudo apt-get install -y --no-install-recommends valgrind

      - name: Install Ninja
        if: matrix.config.os != 'macos-latest'
        run: sudo apt-get install -y --no-install-recommends ninja-build

      # ==== CACHING ====
      - name: buildcache Cache
        uses: actions/cache@v1.1.2
        with:
          path: ${{ github.workspace }}/.buildcache
          key: buildcache-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.mode }}-${{ contains(matrix.config.cxxflags, 'sanitize') }}-${{ matrix.config.lint }}-${{ hashFiles('.pkg') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/*.cc') }}
          restore-keys: |
            buildcache-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.mode }}-${{ contains(matrix.config.cxxflags, 'sanitize') }}-${{ matrix.config.lint }}-${{ hashFiles('.pkg') }}-${{ hashFiles('**/*.h') }}-
            buildcache-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.mode }}-${{ contains(matrix.config.cxxflags, 'sanitize') }}-${{ matrix.config.lint }}-${{ hashFiles('.pkg') }}-
            buildcache-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.mode }}-${{ contains(matrix.config.cxxflags, 'sanitize') }}-${{ matrix.config.lint }}-

      - name: Dependencies Cache
        uses: actions/cache@v1.1.2
        with:
          path: ${{ github.workspace }}/deps
          key: deps-${{ hashFiles('.pkg') }}
          restore-keys: deps-

      # ==== BUILD ====
      - name: CMake
        run: |
          cmake \
            -G Ninja -S . -B build \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_C_FLAGS="${{ matrix.config.cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cxxflags }}" \
            -DCMAKE_CXX_FLAGS_DEBUG="" \
            -DCMAKE_CXX_LINKER_FLAGS=${{ matrix.config.ldflags }}" \
            -DCMAKE_CXX_EXE_LINKER_FLAGS="${{ matrix.config.ldflags }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.mode }} \
            -DMOTIS_LINT=${{ matrix.config.lint }} \
            -DMOTIS_AVX=${{ matrix.config.avx }} \
            -DCTX_ASAN=${{ contains(matrix.config.cxxflags, '-fsanitize=address') }} \
            -DCTX_VALGRIND=${{ matrix.config.cc == 'gcc-10' && matrix.config.mode == 'Debug' }}

      - name: Build
        run: |
          ./build/buildcache/bin/buildcache -z
          cmake --build build --target motis motis-test motis-itest motis-eval motis-intermodal-eval
          ./build/buildcache/bin/buildcache -s

      # ==== TESTS ====
      - name: Run Test Mode
        run: |
          ./build/motis --mode test \
            --import.paths schedule:base/loader/test_resources/hrd_schedules/single-ice \
            --dataset.begin 20151004 \
            --dataset.write_serialized false \
            --exclude_modules address osrm parking path ppr tiles

      - name: Run Tests
        run: ./build/motis-test

      - name: Run Integration Tests
        run: ./build/motis-itest

      # ==== VALGRIND ====
      - name: Run Test Mode Valgrind
        if: matrix.mode == 'Debug' && matrix.config.cc == 'gcc-10'
        run: >
          valgrind --error-exitcode=1 --show-reachable=yes --leak-check=full \
            ./build/motis --mode test \
              --import.paths schedule:base/loader/test_resources/hrd_schedules/single-ice \
              --dataset.begin 20151004 \
              --dataset.write_serialized false \
              --ris.db_max_size 1048576 \
              --bikesharing.db_max_size 1048576

      - name: Run Tests Valgrind
        if: matrix.config.mode == 'Debug' && matrix.config.cc == 'gcc-10'
        run: valgrind --error-exitcode=1 --show-reachable=yes --leak-check=full ./build/motis-test

      - name: Run Integration Tests Valgrind
        if: matrix.config.mode == 'Debug' && matrix.config.cc == 'gcc-10'
        run: valgrind --error-exitcode=1 --show-reachable=yes --leak-check=full ./build/motis-itest

      # ==== DISTRIBUTION ====
      - name: Strip Executable
        if: matrix.config.mode == 'Release' && (matrix.config.cc == 'gcc-10' || matrix.config.os == 'macos-latest')
        run: strip build/motis

      - name: Compile Web Interface
        if: matrix.config.mode == 'Release' && (matrix.config.cc == 'gcc-10' || matrix.config.os == 'macos-latest')
        run: |
          cd ./ui/web
          mkdir elm
          cd elm
          curl -L -o elm-platform.tar.gz https://github.com/elm-lang/elm-platform/releases/download/0.18.0-exp/elm-platform-${{ matrix.config.elm }}.tar.gz
          cmake -E tar xzf elm-platform.tar.gz
          cd ..
          ./elm/elm-make --yes src/Main.elm --output elm.js
          rm -rf elm

      - name: Create Distribution
        if: matrix.config.mode == 'Release' && (matrix.config.cc == 'gcc-10' || matrix.config.os == 'macos-latest')
        run: |
          mkdir motis
          mv ui/web motis
          mv build/motis motis
          cp -r deps/osrm-backend/profiles motis/osrm-profiles
          cp -r deps/ppr/profiles motis/ppr-profiles
          cp -r deps/tiles/profile motis/tiles-profiles
          tar cjf motis-${{ matrix.config.artifact }}.tar.bz2 motis

      - name: Upload Distribution
        if: matrix.config.mode == 'Release' && (matrix.config.cc == 'gcc-10' || matrix.config.os == 'macos-latest')
        uses: actions/upload-artifact@v1
        with:
          name: motis-${{ matrix.config.artifact }}
          path: motis-${{ matrix.config.artifact }}.tar.bz2

      # ==== RELEASE ====
      - name: Upload Release
        if: github.event.action == 'published' && matrix.config.mode == 'Release' && (matrix.config.cc == 'gcc-10' || matrix.config.os == 'macos-latest')
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./motis-${{ matrix.config.artifact }}.tar.bz2
          asset_name: motis-${{ matrix.config.artifact }}.tar.bz2
          asset_content_type: application/x-tar
