name: Unix Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types:
      - published

jobs:
  formatting:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install clang-format
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 12
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends clang-format-12

      - name: Format files
        run: find base libs modules test -type f -a \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 clang-format-12 -i

      - name: Check for differences
        run: |
          git status --porcelain
          git status --porcelain | xargs -I {} -0 test -z \"{}\"

  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: macos-avx2
            cxx: clang++
            cc: clang
            mode: Release
            cxxflags: -stdlib=libc++
            os: macos-latest
            artifact: macos
            avx: On
            avx2: On
            webui: On
            tests: Off
            strip: strip
          - name: macos-noavx2
            cxx: clang++
            cc: clang
            mode: Release
            cxxflags: -stdlib=libc++
            os: macos-latest
            artifact: macos-noavx2
            avx: On
            avx2: Off
            webui: On
            tests: On
            strip: strip
          - name: linux-amd64-debug
            cxx: g++-10
            cc: gcc-10
            mode: Debug
            os: ubuntu-20.04
            avx: On
            avx2: On
            webui: Off
            tests: On
            emulator: valgrind --error-exitcode=1
            install: ninja-build valgrind
          - name: linux-amd64-clang
            cxx: clang++-12
            cc: clang-12
            mode: Release
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
            avx: On
            avx2: On
            webui: Off
            tests: On
            install: ninja-build
          - name: linux-clang-tidy
            cxx: clang++-12
            cc: clang-12
            mode: Debug
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            lint: true
            os: ubuntu-20.04
            avx: On
            avx2: On
            webui: Off
            tests: On
            install: ninja-build
          - name: linux-clang-sanitizer
            cxx: clang++-12
            cc: clang-12
            mode: Release
            cflags: -fsanitize=address,undefined -fno-omit-frame-pointer
            cxxflags: -fsanitize=address,undefined -fno-omit-frame-pointer -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
            avx: On
            avx2: On
            webui: Off
            tests: On
            install: ninja-build
          - name: linux-amd64-release
            os: ubuntu-20.04
            toolchain: x86_64-multilib-linux-musl
            cxx: /opt/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-g++
            cc: /opt/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-gcc
            mode: Release
            ldflags: -static-libgcc -static-libstdc++ -static
            cross: |-
              -DCMAKE_CROSSCOMPILING=1 \
              -DCMAKE_LIBRARY_PATH=/opt/x86_64-multilib-linux-musl/lib \
              -DCMAKE_SYSROOT=/opt/x86_64-multilib-linux-musl/x86_64-multilib-linux-musl/sysroot
            artifact: linux-amd64
            avx: On
            avx2: On
            webui: On
            tests: On
            strip: /opt/x86_64-multilib-linux-musl/x86_64-multilib-linux-musl/bin/strip
            install: ninja-build
          - name: linux-amd64-noavx-release
            os: ubuntu-20.04
            toolchain: x86_64-multilib-linux-musl
            cxx: /opt/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-g++
            cc: /opt/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-gcc
            mode: Release
            ldflags: -static-libgcc -static-libstdc++ -static
            cross: |-
              -DCMAKE_CROSSCOMPILING=1 \
              -DCMAKE_LIBRARY_PATH=/opt/x86_64-multilib-linux-musl/lib \
              -DCMAKE_SYSROOT=/opt/x86_64-multilib-linux-musl/x86_64-multilib-linux-musl/sysroot
            artifact: linux-amd64-noavx
            avx: Off
            avx2: Off
            webui: On
            tests: On
            strip: /opt/x86_64-multilib-linux-musl/x86_64-multilib-linux-musl/bin/strip
            install: ninja-build
          - name: linux-x86-release
            os: ubuntu-20.04
            toolchain: x86_64-multilib-linux-musl
            cxx: /opt/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-g++
            cc: /opt/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-gcc
            cflags: -m32 -mfpmath=sse -msse2
            cxxflags: -m32 -mfpmath=sse -msse2
            mode: Release
            ldflags: -static-libgcc -static-libstdc++ -static
            cross: |-
              -DCMAKE_ASM_FLAGS=-m32 \
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=i686 \
              -DCMAKE_LIBRARY_PATH=/opt/x86_64-multilib-linux-musl/lib \
              -DCMAKE_SYSROOT=/opt/x86_64-multilib-linux-musl/x86_64-multilib-linux-musl/sysroot
            artifact: linux-x86
            avx: Off
            avx2: Off
            webui: On
            tests: On
            strip: /opt/x86_64-multilib-linux-musl/x86_64-multilib-linux-musl/bin/strip
            install: ninja-build
          - name: linux-arm-release
            os: ubuntu-20.04
            toolchain: arm-unknown-linux-musleabi
            cxx: /opt/arm-unknown-linux-musleabi/bin/arm-unknown-linux-musleabi-g++
            cc: /opt/arm-unknown-linux-musleabi/bin/arm-unknown-linux-musleabi-gcc
            cflags: -Wno-psabi -latomic
            cxxflags: -Wno-psabi -latomic
            mode: Release
            ldflags: -static-libgcc -static-libstdc++ -static -latomic
            cross: |-
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=arm \
              -DCMAKE_LIBRARY_PATH=/opt/arm-unknown-linux-musleabi/lib \
              -DCMAKE_SYSROOT=/opt/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/sysroot
            artifact: linux-arm
            avx: Off
            avx2: Off
            webui: On
            tests: On
            strip: /opt/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/bin/strip
            install: ninja-build qemu-user-static
            emulator: qemu-arm-static
          - name: linux-arm64-release
            os: ubuntu-20.04
            toolchain: aarch64-unknown-linux-musl
            cxx: /opt/aarch64-unknown-linux-musl/bin/aarch64-unknown-linux-musl-g++
            cc: /opt/aarch64-unknown-linux-musl/bin/aarch64-unknown-linux-musl-gcc
            cflags: -Wno-psabi -latomic
            cxxflags: -Wno-psabi -latomic
            mode: Release
            ldflags: -static-libgcc -static-libstdc++ -static
            cross: |-
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              -DCMAKE_LIBRARY_PATH=/opt/aarch64-unknown-linux-musl/lib \
              -DCMAKE_SYSROOT=/opt/aarch64-unknown-linux-musl/aarch64-unknown-linux-musl/sysroot
            artifact: linux-arm64
            avx: Off
            avx2: Off
            webui: On
            tests: On
            strip: /opt/aarch64-unknown-linux-musl/aarch64-unknown-linux-musl/bin/strip
            install: ninja-build qemu-user-static
            emulator: qemu-aarch64-static
    env:
      DEBIAN_FRONTEND: noninteractive
      BUILDCACHE_COMPRESS: true
      BUILDCACHE_DIRECT_MODE: true
      BUILDCACHE_ACCURACY: SLOPPY
      BUILDCACHE_LUA_PATH: ${{ github.workspace }}/tools
      BUILDCACHE_DIR: ${{ github.workspace }}/.buildcache
      UBSAN_OPTIONS: halt_on_error=1:abort_on_error=1
    steps:
      - uses: actions/checkout@v2

      - uses: seanmiddleditch/gha-setup-ninja@master
        if: matrix.config.os == 'macos-latest'

      # ==== INSTALL ====
      - name: Update APT
        if: matrix.config.os != 'macos-latest'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update

      - name: Install LLVM
        if: matrix.config.os != 'macos-latest' && matrix.config.cc == 'clang-12'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 12
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends libc++-12-dev libc++abi-12-dev clang-tidy-12 libunwind-12-dev

      - name: Install Packages
        if: matrix.config.os != 'macos-latest'
        run: sudo apt-get install -y --no-install-recommends ${{ matrix.config.install }}

      - name: Install musl Toolchain
        if: matrix.config.toolchain
        run: |
          wget https://github.com/motis-project/musl-toolchains/releases/latest/download/${{ matrix.config.toolchain }}.tar.xz
          tar xf ${{ matrix.config.toolchain }}.tar.xz -C /opt

      # ==== CACHING ====
      - name: buildcache Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.buildcache
          key: buildcache-${{ matrix.config.name }}-${{ hashFiles('.pkg') }}-${{ hashFiles('**/*.h') }}-${{ hashFiles('**/*.cc') }}
          restore-keys: |
               buildcache-${{ matrix.config.name }}-${{ hashFiles('.pkg') }}-${{ hashFiles('**/*.h') }}-
               buildcache-${{ matrix.config.name }}-${{ hashFiles('.pkg') }}-
               buildcache-${{ matrix.config.name }}-

      - name: Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/deps
          key: deps-${{ hashFiles('.pkg') }}
          restore-keys: deps-

      # ==== BUILD ====
      - name: CMake
        run: |
          cmake ${{ matrix.config.cross }} \
            -G Ninja -S . -B build \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_C_FLAGS="${{ matrix.config.cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cxxflags }}" \
            -DCMAKE_CXX_FLAGS_DEBUG="" \
            -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.config.ldflags }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.mode }} \
            -DMOTIS_LINT=${{ matrix.config.lint }} \
            -DMOTIS_AVX=${{ matrix.config.avx }} \
            -DMOTIS_AVX2=${{ matrix.config.avx2 }} \
            -DCTX_ASAN=${{ contains(matrix.config.cxxflags, '-fsanitize=address') }} \
            -DCTX_VALGRIND=${{ matrix.config.cc == 'gcc-10' && matrix.config.mode == 'Debug' }} \
            -DMOTIS_WITH_WEBUI=${{ matrix.config.webui }}

      - name: Build
        run: |
          ./build/buildcache/bin/buildcache -z
          cmake --build build --target \
            motis \
            motis-test \
            motis-itest \
            motis-eval \
            motis-intermodal-eval \
            motis-pax-tools
          ./build/buildcache/bin/buildcache -s

      - name: Show tree on failure
        if: ${{ failure() }}
        run: |
          sudo apt-get install -y --no-install-recommends tree
          file build/deps/protobuf/protoc
          ldd build/deps/protobuf/protoc

      # ==== TESTS ====
      - name: Run Test Mode
        if: matrix.config.tests == 'On'
        run: |
          ${{ matrix.config.emulator }} ./build/motis --mode test \
            --import.paths schedule:base/loader/test_resources/hrd_schedules/single-ice \
            --dataset.begin 20151004 \
            --dataset.write_serialized false \
            --exclude_modules address osrm parking path ppr tiles \
            --ris.db_max_size 1048576 \
            --exclude_modules address osrm parking path ppr tiles tripbased

      - name: Run Tests
        if: matrix.config.tests == 'On'
        run: ${{ matrix.config.emulator }} ./build/motis-test

      - name: Run Integration Tests
        if: matrix.config.tests == 'On'
        run: ${{ matrix.config.emulator }} ./build/motis-itest

      # ==== DISTRIBUTION ====
      - name: Strip Executable
        if: matrix.config.artifact
        run: ${{ matrix.config.strip }} build/motis

      - name: Compile Web Interface
        if: matrix.config.webui == 'On'
        run: cmake --build build --target motis-web-ui

      - name: Create Distribution
        if: matrix.config.artifact
        run: |
          mkdir motis
          mv ui/web motis
          mv build/motis motis
          cp -r deps/osrm-backend/profiles motis/osrm-profiles
          cp -r deps/ppr/profiles motis/ppr-profiles
          cp -r deps/tiles/profile motis/tiles-profiles
          tar cjf motis-${{ matrix.config.artifact }}.tar.bz2 motis

      - name: Upload Distribution
        if: matrix.config.artifact
        uses: actions/upload-artifact@v1
        with:
          name: motis-${{ matrix.config.artifact }}
          path: motis-${{ matrix.config.artifact }}.tar.bz2

      # ==== RELEASE ====
      - name: Upload Release
        if: github.event.action == 'published' && matrix.config.artifact
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./motis-${{ matrix.config.artifact }}.tar.bz2
          asset_name: motis-${{ matrix.config.artifact }}.tar.bz2
          asset_content_type: application/x-tar

  full-data-set-test:
    runs-on: ${{ matrix.config.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        config:
          - artifact: macos-noavx2
            os: macos-latest
          - artifact: linux-amd64
            os: ubuntu-20.04
          - artifact: linux-x86
            os: ubuntu-20.04
          - artifact: linux-arm
            os: ubuntu-20.04
            emulator: qemu-arm-static -L /usr/arm-linux-gnueabihf
            packages: bzip2 unzip qemu-user-static
          - artifact: linux-arm64
            os: ubuntu-20.04
            emulator: qemu-aarch64-static -L /usr/aarch64-linux-gnu
            packages: bzip2 unzip qemu-user-static

    steps:
      - name: Install packages
        if: matrix.config.packages != ''
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ${{ matrix.config.packages }}

      - name: Download timetable and OSM dataset
        uses: actions/checkout@v2
        with:
          repository: motis-project/test-data
          ref: aachen

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: motis-${{ matrix.config.artifact }}

      - name: Unpack distribution and data
        run: |
          mkdir -p data/hrd
          unzip AVV_HAFAS_520.zip -d data/hrd
          mv zeitvs data/hrd
          mv aachen.osm.pbf data
          tar xf motis-${{ matrix.config.artifact }}.tar.bz2

      - name: Start MOTIS
        run: |
          ${{ matrix.config.emulator }} ./motis/motis \
            --mode test \
            --modules routing lookup guesser ppr address intermodal osrm railviz tiles \
            --server.static_path motis/web \
            --import.data_dir data \
            --import.paths schedule:data/hrd osm:data/aachen.osm.pbf \
            --dataset.begin 20210809 \
            --osrm.profiles motis/osrm-profiles/car.lua \
            --osrm.profiles motis/osrm-profiles/bike.lua \
            --ppr.profile motis/ppr-profiles/default.json \
            --tiles.profile motis/tiles-profiles/background.lua \
            --tiles.import.flush_threshold 100000 \
            --tiles.db_size 268435456

  docker:
    runs-on: ubuntu-20.04
    needs: full-data-set-test
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Docker setup-buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge

      - name: Docker build and push
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
