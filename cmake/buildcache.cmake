option(NO_BUILDCACHE "Disable build caching using buildcache" Off)

set(buildcache-bin ${CMAKE_CURRENT_BINARY_DIR}/buildcache/bin/buildcache)
get_property(rule-launch-set GLOBAL PROPERTY RULE_LAUNCH_COMPILE SET)
if (NO_BUILDCACHE)
  message(STATUS "NO_BUILDCACHE set, buildcache disabled")
elseif(rule-launch-set)
  message(STATUS "Global property RULE_LAUNCH_COMPILE already set - skipping buildcache")
else()
  find_program(buildcache_program buildcache HINTS ${CMAKE_CURRENT_BINARY_DIR}/buildcache/bin)
  if(buildcache_program)
    message(STATUS "Using buildcache: ${buildcache_program}")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${buildcache_program}")
  else()
    message(STATUS "buildcache not found - downloading")
    if (APPLE)
      set(buildcache-archive "buildcache-macos.zip")
    elseif(UNIX)
      set(buildcache-archive "buildcache-linux.tar.gz")
    elseif(WIN32)
      set(buildcache-archive "buildcache-win-msvc.zip")
    else()
      message(FATAL "Error: NO_BUILDCACHE was not set but buildcache was not in path and system OS detection failed")
    endif()

    set(buildcache-url "https://github.com/mbitsnbites/buildcache/releases/download/v0.22.3/${buildcache-archive}")
    message(STATUS "Downloading buildcache binary from ${buildcache-url}")
    file(DOWNLOAD "${buildcache-url}" ${CMAKE_CURRENT_BINARY_DIR}/${buildcache-archive})
    execute_process(
      COMMAND ${CMAKE_COMMAND} -E tar xf ${CMAKE_CURRENT_BINARY_DIR}/${buildcache-archive}
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
    message(STATUS "using buildcache: ${buildcache-bin}")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${buildcache-bin})
  endif()
endif()
