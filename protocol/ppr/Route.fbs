include "base/Position.fbs";
include "base/Polyline.fbs";

namespace motis.ppr;

enum EdgeType : ubyte {
  CONNECTION,
  STREET,
  FOOTWAY,
  CROSSING,
  ELEVATOR,
  ENTRANCE,
  CYCLE_BARRIER
}

enum CrossingType : ubyte {
  NONE,
  GENERATED,
  UNMARKED,
  MARKED,
  ISLAND,
  SIGNALS
}

enum StreetType : ubyte {
  NONE,
  // edge_type = FOOTWAY
  TRACK,
  FOOTWAY,
  PATH,
  CYCLEWAY,
  CORRIDOR,
  BRIDLEWAY,
  STAIRS,
  ESCALATOR,
  MOVING_WALKWAY,
  PLATFORM,
  // edge_type = STREET
  SERVICE,
  PEDESTRIAN,
  LIVING,
  RESIDENTIAL,
  UNCLASSIFIED,
  TERTIARY,
  SECONDARY,
  PRIMARY,
  // railway
  RAIL,
  TRAM
}

enum DoorType : ubyte {
  UNKNOWN,
  YES,
  NO,
  HINGED,
  SLIDING,
  REVOLVING,
  FOLDING,
  TRAPDOOR,
  OVERHEAD
}

enum AutomaticDoorType : ubyte {
  UNKNOWN,
  YES,
  NO,
  BUTTON,
  MOTION,
  FLOOR,
  CONTINUOUS,
  SLOWDOWN_BUTTON
}

enum TriState : ubyte { UNKNOWN, NO, YES }

table Edge {
  distance: double;
  duration: double;
  accessibility: double;
  path: Polyline;
  name: string;
  osm_way_id: long;
  from_node_osm_id: ulong;
  to_node_osm_id: ulong;
  edge_type: EdgeType;
  street_type: StreetType;
  crossing_type: CrossingType;
  elevation_up: int;
  elevation_down: int;
  incline_up: bool;
  handrail: TriState;
  door_type: DoorType;
  automatic_door_type: AutomaticDoorType;
  traffic_signals_sound: TriState;
  traffic_signals_vibration: TriState;
  area: bool;
  free_crossing: bool;
  beeline: bool;
  levels: [double];
}

enum RouteStepType : ubyte {
  INVALID,
  STREET,
  FOOTWAY,
  CROSSING,
  ELEVATOR,
  ENTRANCE,
  CYCLE_BARRIER
}

table RouteStep {
  step_type: RouteStepType;
  street_name: string;
  street_type: StreetType;
  crossing_type: CrossingType;
  distance: double;
  duration: double;
  accessibility: double;
  path: Polyline;
  elevation_up: int;
  elevation_down: int;
  incline_up: bool;
  handrail: TriState;
  door_type: DoorType;
  automatic_door_type: AutomaticDoorType;
  traffic_signals_sound: TriState;
  traffic_signals_vibration: TriState;
  beeline: bool;
}

table Route {
  distance: double;
  duration: ushort;
  duration_exact: double;
  duration_division: double;
  accessibility: ushort;
  accessibility_exact: double;
  accessibility_division: double;
  start: Position;
  destination: Position;
  steps: [RouteStep];
  edges: [Edge];
  path: Polyline;
  elevation_up: int;
  elevation_down: int;
}
