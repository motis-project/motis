include "base/TripId.fbs";
include "base/TimestampReason.fbs";
include "base/EventType.fbs";
include "base/Connection.fbs";
include "ris/TripFormationMessage.fbs";

namespace motis.rt;

table RtEventInfo {
  station_id: string;
  schedule_time: long;
  event_type: motis.EventType;
}

table UpdatedRtEventInfo {
  base: RtEventInfo;
  updated_time: long;
  reason: TimestampReason;
}

table RtDelayUpdate {
  trip: motis.TripId;
  events: [UpdatedRtEventInfo];
  trip_separated: bool;
}

table RtRerouteUpdate {
  trip: motis.TripId;
  old_route: [RtEventInfo];
  new_route: [RtEventInfo];
}

table RtTrackUpdate {
  trip: motis.TripId;
  event: RtEventInfo;
  updated_track: string;
}

table RtFreeTextUpdate {
  trip: motis.TripId;
  event: RtEventInfo;
  free_text: FreeText;
}

table RtStationAdded {
  id: string;
  name: string;
}

enum RtExpandedTripUpdateType : byte {
  TripUpdated,
  TripAdded,
  TripRemoved
}

struct RtExpandedTripIndex {
  route_index: uint; // expanded route
  index_in_route: uint;
}

table RtExpandedTripUpdate {
  trip_index: uint;
  update_type: RtExpandedTripUpdateType;
  old_expanded_route: RtExpandedTripIndex; // valid only if updated or removed
  new_expanded_route: RtExpandedTripIndex; // valid only if updated or added
}

union Content {
  RtDelayUpdate,
  RtRerouteUpdate,
  RtTrackUpdate,
  RtFreeTextUpdate,
  RtStationAdded,
  RtExpandedTripUpdate,
  motis.ris.TripFormationMessage
}

table RtUpdate {
  content: Content;
}

table RtUpdates {
  updates: [RtUpdate];
  schedule: ulong;
}
